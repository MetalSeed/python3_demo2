#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date    : 2019-05-06 18:01:00
# @Author  : MetalSeed (=.=)
# @Link    :  
# @Version : $Id$

# 直接给出字符，就是精确匹配
# \d 一个数字
# \w 一个字母或数字
# \s 一个空格
#  . 一个任意字符

#  可变长度
#  * 表示任意个字符（包括0个）
#  + 表示至少一个字符
#  ? 表示0个或1个字符
# {n}表示n个字符，用{n,m}表示n-m个字符

# []精确匹配
# [0-9a-zA-Z\_] 一个数字字母或下划线
# [0-9a-zA-Z\_]+ 至少由一个数字字母或下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'
# [a-zA-Z\_][0-9a-zA-Z\_]* 由字母或下划线开头，后接任意个由一个数字字母或者下划线组成的字符串，也就是Python合法的变量；
# [a-zA-Z\_][0-9a-zA-Z\_]{0, 19} 更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。

# A|B 可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'
# ^ 表示行的开头，^\d表示必须以数字开头。
# $ 表示行的结束，\d$表示必须以数字结束。py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py’

# 强烈建议使用Python的r前缀
# s = 'ABC\\-001' # Python的字符串
# s = r'ABC\-001' # Python的字符串

# () 表示的分组（Group），可以用被提取
# group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串

import re

re.split(r'\s+', 'a b   c')
re.split(r'[\s\,]+', 'a,b, c  d')
re.split(r'[\s\,\;]+', 'a,b;; c  d')

print('Test: 010-12345')
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m.group(1), m.group(2))

t = '19:05:30'
print('Test:', t)
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)

# 贪婪匹配
# 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了
m = re.match(r'^(\d+)(0*)$', '102300').groups()
print(m)
# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：
m = re.match(r'^(\d+?)(0*)$', '102300').groups()
print(m)

# 正则表达式每调用一次re模块内会先编译，然后再去匹配，如果一个表达式用很多次提前编译可提升效率
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')

re_telephone.match('010-12345').groups()
re_telephone.match('010-8086').groups()



